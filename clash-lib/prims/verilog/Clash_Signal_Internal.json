[ { "BlackBox" :
    { "name" : "Clash.Signal.Internal.delay#"
    , "kind" : "Declaration"
    , "type" :
"delay#
  :: ( KnownDomain dom        -- ARG[0]
     , Undefined a )          -- ARG[1]
  => Clock dom                -- ARG[2]
  -> Enable dom               -- ARG[3]
  -> a                        -- ARG[4]
  -> Signal clk a             -- ARG[5]
  -> Signal clk a"
    , "template" :
"// delay begin,
reg ~TYPO ~GENSYM[~RESULT_reg][0] ~IF ~ISINITDEFINED[0] ~THEN = ~CONST[4] ~ELSE ~FI;~IF ~ISACTIVEENABLE[3] ~THEN
always @(~IF~ACTIVEEDGE[Rising][0]~THENposedge~ELSEnegedge~FI ~ARG[2]) begin : ~GENSYM[~RESULT_delay][1]
  if (~ARG[3]) begin
    ~SYM[0] <= ~ARG[5];
  end
end~ELSE
always @(~IF~ACTIVEEDGE[Rising][0]~THENposedge~ELSEnegedge~FI ~ARG[2]) begin : ~SYM[1]
  ~SYM[0] <= ~ARG[5];
end~FI
assign ~RESULT = ~SYM[0];
// delay end"
    }
  }
, { "BlackBox" :
    { "name" : "Clash.Signal.Internal.register#"
    , "kind" : "Declaration"
    , "type" :
"register#
  :: ( KnownDomain dom        -- ARG[0]
     , Undefined a )          -- ARG[1]
  => Clock dom                -- ARG[2]
  -> Reset dom                -- ARG[3]
  -> Enable dom               -- ARG[4]
  -> a                        -- ARG[5] (powerup value)
  -> a                        -- ARG[6] (reset value)
  -> Signal clk a             -- ARG[7]
  -> Signal clk a"
    , "template" :
"// register begin
reg ~TYPO ~GENSYM[~RESULT_reg][0] ~IF ~ISINITDEFINED[0] ~THEN = ~CONST[5] ~ELSE ~FI;
always @(~IF~ACTIVEEDGE[Rising][0]~THENposedge~ELSEnegedge~FI ~ARG[2]~IF ~ISSYNC[0] ~THEN ~ELSE or ~IF ~ISACTIVEHIGH[0] ~THEN posedge ~ELSE negedge ~FI ~ARG[3]~FI) begin : ~GENSYM[~RESULT_register][1]
  if (~IF ~ISACTIVEHIGH[0] ~THEN ~ELSE ! ~FI~ARG[3]) begin
    ~SYM[0] <= ~CONST[6];
  end else ~IF ~ISACTIVEENABLE[4] ~THEN if (~ARG[4]) ~ELSE ~FI begin
    ~SYM[0] <= ~ARG[7];
  end
end
assign ~RESULT = ~SYM[0];
// register end"
    }
  }
, { "BlackBox" :
    { "name"      : "Clash.Signal.Internal.clockGen"
    , "workInfo"  : "Always"
    , "kind" : "Declaration"
    , "warning" : "Clash.Signal.Internal.clockGen is not synthesizable!"
    , "type" :
"clockGen
  :: KnownDomain dom     -- ARG[0]
  => Clock dom"
    , "template" :
"// clockGen begin
// pragma translate_off
reg ~TYPO ~GENSYM[clk][0];
// 1 = 0.1ps
localparam ~GENSYM[half_period][1] = (~PERIOD[0]0 / 2);
always begin
  ~SYM[0] = ~IF~ACTIVEEDGE[Rising][0]~THEN 0 ~ELSE 1 ~FI;
  #30000 forever begin
    ~SYM[0] = ~ ~SYM[0];
    #~SYM[1];
    ~SYM[0] = ~ ~SYM[0];
    #~SYM[1];
  end
end
assign ~RESULT = ~SYM[0];
// pragma translate_on
// clockGen end"
    }
  }
, { "BlackBox" :
    { "name"      : "Clash.Signal.Internal.tbClockGen"
    , "workInfo"  : "Always"
    , "kind" : "Declaration"
    , "warning" : "Clash.Signal.Internal.tbClockGen is not synthesizable!"
    , "type" :
"tbClockGen
  :: KnownDomain dom     -- ARG[0]
  => Signal dom Bool      -- ARG[1]
  -> Clock dom"
    , "template" :
"// tbClockGen begin
// pragma translate_off
reg ~TYPO ~GENSYM[clk][0];
// 1 = 0.1ps
localparam ~GENSYM[half_period][1] = (~PERIOD[0]0 / 2);
always begin
  ~SYM[0] = ~IF~ACTIVEEDGE[Rising][0]~THEN 0 ~ELSE 1 ~FI;
  #30000 forever begin
    if (~ ~ARG[1]) begin
      $finish;
    end
    ~SYM[0] = ~ ~SYM[0];
    #~SYM[1];
    ~SYM[0] = ~ ~SYM[0];
    #~SYM[1];
  end
end
assign ~RESULT = ~SYM[0];
// pragma translate_on
// tbClockGen end"
    }
  }
, { "BlackBox" :
    { "name"      : "Clash.Signal.Internal.resetGen"
    , "workInfo"  : "Always"
    , "kind" : "Declaration"
    , "type" :
"resetGen :: KnownDomain dom      => Reset dom"
    , "template" :
"// resetGen on
// pragma translate_off
~IF~ISSYNC[0]~THEN
reg ~TYPO ~GENSYM[rst][0];
localparam ~GENSYM[reset_period][1] = 29998 + ~PERIOD[0]0;
initial begin
  #1 ~SYM[0] = ~IF ~ISACTIVEHIGH[0] ~THEN 1 ~ELSE 0 ~FI;
  #~SYM[1] ~SYM[0] = ~IF ~ISACTIVEHIGH[0] ~THEN 0 ~ELSE 1 ~FI;
end
assign ~RESULT = ~SYM[0];~ELSE
reg ~TYPO ~SYM[0];
initial begin
  #1     ~SYM[0] = ~IF ~ISACTIVEHIGH[0] ~THEN 1 ~ELSE 0 ~FI;
  #30001 ~SYM[0] = ~IF ~ISACTIVEHIGH[0] ~THEN 0 ~ELSE 1 ~FI;
end
assign ~RESULT = ~SYM[0]; ~FI
// pragma translate_on
// resetGen end"
    }
  }
]
