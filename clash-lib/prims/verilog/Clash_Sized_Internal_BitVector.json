[ { "BlackBox" :
    { "name"      : "Clash.Sized.Internal.BitVector.replaceBit#"
    , "kind"      : "Declaration"
    , "type" :
"replaceBit# :: KnownNat n  -- ARG[0]
             => BitVector n -- ARG[1]
             -> Int         -- ARG[2]
             -> Bit         -- ARG[3]
             -> BitVector n"
    , "outputReg" : true
    , "template" :
"// replaceBit start
always @(*) begin
  ~RESULT = ~ARG[1];
  ~RESULT[~ARG[2]] = ~VAR[din][3];
end
// replaceBit end"
    }
  }
, { "BlackBox" :
    { "name" : "Clash.Sized.Internal.BitVector.setSlice#"
    , "workInfo" : "Never"
    , "kind" : "Declaration"
    , "type" :
"setSlice# :: BitVector (m + 1 + i) -- ARG[0]
           -> SNat m                -- ARG[1]
           -> SNat n                -- ARG[2]
           -> BitVector (m + 1 - n) -- ARG[3]
           -> BitVector (m + 1 + i)"
    , "outputReg" : true
    , "template" :
"// setSlice begin
always @(*) begin
  ~RESULT = ~ARG[0];
  ~RESULT[~LIT[1] : ~LIT[2]] = ~VAR[din][3];
end
// setSlice end"
    }
  }
, { "BlackBox" :
    { "name" : "Clash.Sized.Internal.BitVector.split#"
    , "kind" : "Expression"
    , "type" :
"split# :: KnownNat n        -- ARG[0]
        => BitVector (m + n) -- ARG[1]
        -> (BitVector m, BitVector n)"
    , "template" : "~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "Clash.Sized.Internal.BitVector.rotateL#"
    , "kind"      : "Declaration"
    , "type"      : "rotateL# :: KnownNat n => BitVector n -> Int -> BitVector n"
    , "template"  :
"// rotateL begin
wire [2*~SIZE[~TYPO]-1:0] ~GENSYM[bv][0];
assign ~SYM[0] = {~ARG[1],~ARG[1]} << (~ARG[2] % ~SIZE[~TYPO]);
assign ~RESULT = ~SYM[0][2*~SIZE[~TYPO]-1 : ~SIZE[~TYPO]];
// rotateL end"
    }
  }
, { "BlackBox" :
    { "name"      : "Clash.Sized.Internal.BitVector.rotateR#"
    , "kind"      : "Declaration"
    , "type"      : "rotateR# :: KnownNat n => BitVector n -> Int -> BitVector n"
    , "template"  :
"// rotateR begin
wire [2*~SIZE[~TYPO]-1:0] ~GENSYM[bv][0];
assign ~SYM[0] = {~ARG[1],~ARG[1]} >> (~ARG[2] % ~SIZE[~TYPO]);
assign ~RESULT = ~SYM[0][~SIZE[~TYPO]-1 : 0];
// rotateR end"
    }
  }
]
